function y = mymvnpdf(X, Mu, Sigma)

[n,d] = size(X);

    sz = size(Sigma);
    if (d == 1) && (numel(X) > 1) && (sz(1) == n)
        X0 = X0';
        d = size(X0,2);
    end

            Sigma = mean(cat(3,Sigma,Sigma'),3);
            [R,~] = cholcov(Sigma,0);

            xRinv = X0 / R;
            logSqrtDetSigma = sum(log(diag(R)));
%         end
%     end
    
% Multiple covariance matrices
% elseif ndims(Sigma) == 3
%     
%     sz = size(Sigma);
%     if sz(1)==1 && sz(2)>1
%         % Just the diagonal of Sigma has been passed in.
%         sz(1) = sz(2);
%         Sigma = reshape(Sigma,sz(2),sz(3))';
%         sigmaIsDiag = true;
%     else
%         sigmaIsDiag = false;
%     end
% 
%     % Special case: if Sigma is supplied, then use it to try to interpret
%     % X and Mu as row vectors if they were both column vectors.
%     if (d == 1) && (numel(X) > 1) && (sz(1) == n)
%         X0 = X0';
%         [n,d] = size(X0);
%     end
%     
%     % Data and mean are a single row, rep them out to match covariance
%     if n == 1 % already know size(Sigma,3) > 1
%         n = sz(3);
%         X0 = repmat(X0,n,1); % rep centered data out to match cov
%     end
% 
%     % Make sure Sigma is the right size
%     if sz(1) ~= sz(2)
%         error(message('stats:mvnpdf:BadCovarianceMultiple'));
%     elseif (sz(1) ~= d) || (sz(2) ~= d) % Sigma is a stack of dxd matrices
%         error(message('stats:mvnpdf:CovSizeMismatchMultiple'));
%     elseif sz(3) ~= n
%         error(message('stats:mvnpdf:CovSizeMismatchPages'));
%     else
%         if sigmaIsDiag
%             if any(any(Sigma<=0))
%                 error(message('stats:mvnpdf:BadDiagSigma'));
%             end
%             R = sqrt(Sigma);
%             xRinv = X0./R;
%             logSqrtDetSigma = sum(log(R),2);
%         else
%             % Create array of standardized data, and vector of log(sqrt(det(Sigma)))
%             xRinv = zeros(n,d,superiorfloat(X0,Sigma));
%             logSqrtDetSigma = zeros(n,1,class(Sigma));
%             for i = 1:n
%                 % Make sure Sigma is a valid covariance matrix
%                 [R,err] = cholcov(Sigma(:,:,i),0);
%                 if err ~= 0
%                     error(message('stats:mvnpdf:BadMatrixSigmaMultiple'));
%                 end
%                 xRinv(i,:) = X0(i,:) / R;
%                 logSqrtDetSigma(i) = sum(log(diag(R)));
%             end
%         end
%     end
%    
% elseif ndims(Sigma) > 3
%     error(message('stats:mvnpdf:BadCovariance'));
% end

% The quadratic form is the inner products of the standardized data
quadform = sum(xRinv.^2, 2);

y = exp(-0.5*quadform - logSqrtDetSigma - d*log(2*pi)/2);
% for i=1:length(X)
%     y(i) = 1/((2*pi)^(d/2)*sqrt(det(Sigma)))*exp(-1/2*X0(i,:)*inv(Sigma)*X0(i,:)');
% end
